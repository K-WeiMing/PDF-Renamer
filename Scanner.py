from pdf2image import convert_from_pathimport PyPDF2import pytesseractfrom pytesseract import Outputimport reimport numpy as npimport cv2import pandas as pdimport osimport getpassfrom datetime import datetime# poppler_location = "...\poppler-0.68.0\bin"poppler_location = r""# tess_location = r"...\AppData\Local\Tesseract-OCR\\tesseract.exe""tess_location = r"C:\Users\\" + getpass.getuser() + r"\AppData\Local\Tesseract-OCR\\tesseract.exe"pytesseract.pytesseract.tesseract_cmd = tess_locationdef get_dir(doc_name):    dir_str = os.path.dirname(doc_name)    return dir_strdef listToString(input_list):    final_str = ''.join(input_list)    return final_strdef getImageOrientation(img_obj):    osd = pytesseract.image_to_osd(img_obj)    angle = re.search('(?<=Rotate: )\d+', osd).group(0)    return angledef rotateImage(image_to_rotate):    angle_to_rotate = getImageOrientation(image_to_rotate)    if angle_to_rotate == 90:        return cv2.rotate(image_to_rotate, cv2.ROTATE_90_CLOCKWISE)    elif angle_to_rotate == 180:        return cv2.rotate(image_to_rotate, cv2.ROTATE_180)    elif angle_to_rotate == 270:        return cv2.rotate(image_to_rotate, cv2.ROTATE_90_COUNTERCLOCKWISE)def getImage(document_name, page_number):    # Converts the PDF file and returns a cv2 image file     # Convert PIL to cv2 and grayscale    image_test = convert_from_path(document_name, poppler_path=poppler_location,                                   first_page=page_number, last_page=page_number)    img = cv2.cvtColor(np.array(image_test[0]), cv2.COLOR_BGR2GRAY)    # # Only read the top 25% of the page    # img = img[0:int(img.shape[0] / 4)]    img = cv2.resize(img, None, fx=2, fy=2, interpolation=cv2.INTER_CUBIC)  # Scale to a larger image    # Apply Dilation and Erosion    kernel = np.ones((1, 1), np.uint8)    img = cv2.dilate(img, kernel, iterations=1)    img = cv2.erode(img, kernel, iterations=1)    img = cv2.medianBlur(img, 3)  # Blurring    img = np.uint8(np.abs(img))    ret, img = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)    return imgdef getFileName(doc_name):    # Look through all pages and get the # of data for matching regex fields    print("Script Start")    startTime = datetime.now()    # Regex Patterns    matcode_pattern = ""    batchnum_pattern = ""    erp_pattern = ""    try:        df_list = []        pdf = PyPDF2.PdfFileReader(doc_name)        pdf_totalpages = pdf.getNumPages()        for x in range(1, pdf_totalpages + 1):            page_list = []            print("Page Number: {} / {}".format(x, pdf_totalpages))            img = getImage(doc_name, x)            img = rotateImage(img)            d = pytesseract.image_to_data(img, output_type=Output.DICT)            keys = list(d.keys())            n_boxes = len(d['text'])            for i in range(n_boxes):                if re.fullmatch(matcode_pattern, d['text'][i]):                    # print("\n", str(re.findall(matcode_pattern, d['text'][i])))                    page_list.insert(0, listToString(re.findall(matcode_pattern, d['text'][i])))                if re.fullmatch(batchnum_pattern, d['text'][i]):                    # print("\n", str(re.findall(batchnum_pattern, d['text'][i])))                    page_list.insert(1, listToString(re.findall(batchnum_pattern, d['text'][i])))                if re.fullmatch(erp_pattern, d['text'][i]):                    # print("\n", str(re.findall(erp_pattern, d['text'][i])))                    page_list.insert(2, listToString(re.findall(erp_pattern, d['text'][i])))                # print(d['text'][i])                if int(d['conf'][i]) > 60:                    (x, y, w, h) = (d['left'][i], d['top'][i], d['width'][i], d['height'][i])                    img = cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)            df_list.append(page_list)            if len(page_list) == 3:                break            # Test to show the image            # cv2.imshow('img', img)            # cv2.waitKey(0)        df = pd.DataFrame(df_list, columns=['Mat', 'Batch', 'ERP'])        # print(df)        df.drop_duplicates(inplace=True)        df.dropna(inplace=True, axis=0)        # Generate the final file name        final_file_name = df.iloc[0, 0] + "_" + df.iloc[0, 1] + "_" + df.iloc[0, 2] + ".pdf"        # Rename the pdf file        final_name = str(os.path.dirname(doc_name)) + r'/' + final_file_name        print("Final File Name: ", final_name)        print(" /\_/\\")        print(r"( o.o )  File Renamed!")        print(r" > ^ <")        os.rename(doc_name, final_name)    except:        pass    print("Total Time Taken: ", datetime.now() - startTime)