from pdf2image import convert_from_pathimport PyPDF2import pytesseractfrom pytesseract import Outputimport reimport numpy as npimport cv2import pandas as pdimport osimport getpassfrom datetime import datetime# poppler_location = r"C:\Users\KNGWE1\PycharmProjects\PdfScanner_WM\poppler-0.68.0\bin"poppler_location = r"C:\WM\PDF_Scan_dependencies\poppler-0.68.0\bin"tess_location = r"C:\Users\\" + getpass.getuser() + r"\AppData\Local\Tesseract-OCR\\tesseract.exe"pytesseract.pytesseract.tesseract_cmd = tess_locationdef get_dir(doc_name):    dir_str = os.path.dirname(doc_name)    # print(dir_str)def listToString(input_list):    final_str = ''.join(input_list)    return final_strdef getFileName(doc_name):    # Do the first 25% of pages, if no result go to the next 25%    print("Script Start")    startTime = datetime.now()    try:        df_list = []        # file_name = "804607_SB0116_mes.pdf"        # pdf = PyPDF2.PdfFileReader(file_name)        pdf = PyPDF2.PdfFileReader(doc_name)        # pdf_writer = PyPDF2.PdfFileWriter()        pdf_totalpages = pdf.getNumPages()        # print("Total Pages: {}".format(pdf_totalpages))        for x in range(1, pdf_totalpages + 1):            page_list = []            print("Page Number: {} / {}".format(x, pdf_totalpages))            image_test = convert_from_path(doc_name, poppler_path=poppler_location,                                           first_page=x, last_page=x)            # image_test[0].save(r"C:\Users\KNGWE1\PycharmProjects\pdfScanner\Test {}.JPEG".format(x))            # img = cv2.imread(r"C:\Users\KNGWE1\PycharmProjects\pdfScanner\Test {}.JPEG".format(x))            # Convert PIL to cv2            img = cv2.cvtColor(np.array(image_test[0]), cv2.COLOR_BGR2GRAY)            img = img[0:int(img.shape[0] / 4)]            # img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  # convert to grayscale            img = cv2.resize(img, None, fx=2, fy=2, interpolation=cv2.INTER_CUBIC)  # Scale to a larger image            # Apply Dilation and Erosion            kernel = np.ones((1, 1), np.uint8)            img = cv2.dilate(img, kernel, iterations=1)            img = cv2.erode(img, kernel, iterations=1)            img = cv2.medianBlur(img, 3)  # Blurring            img = np.uint8(np.abs(img))            ret, img = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)            d = pytesseract.image_to_data(img, output_type=Output.DICT)            keys = list(d.keys())            # print(keys)            matcode_pattern = "(?:80[0-9]{4})"            batchnum_pattern = "(?:SB[0-9]{4})"            erp_pattern = "(?:00[0-9][1-9])"            n_boxes = len(d['text'])            for i in range(n_boxes):                if re.fullmatch(matcode_pattern, d['text'][i]):                    # print("\n", str(re.findall(matcode_pattern, d['text'][i])))                    page_list.insert(0, listToString(re.findall(matcode_pattern, d['text'][i])))                if re.fullmatch(batchnum_pattern, d['text'][i]):                    # print("\n", str(re.findall(batchnum_pattern, d['text'][i])))                    page_list.insert(1, listToString(re.findall(batchnum_pattern, d['text'][i])))                if re.fullmatch(erp_pattern, d['text'][i]):                    # print("\n", str(re.findall(erp_pattern, d['text'][i])))                    page_list.insert(2, listToString(re.findall(erp_pattern, d['text'][i])))                # print(d['text'][i])                if int(d['conf'][i]) > 60:                    (x, y, w, h) = (d['left'][i], d['top'][i], d['width'][i], d['height'][i])                    img = cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)            # print('Length of page_list: ', len(page_list))            df_list.append(page_list)            if len(page_list) == 3:                break            # cv2.imshow('img', img)            # cv2.waitKey(0)            # Delete the file once done            # os.remove(r"C:\Users\KNGWE1\PycharmProjects\pdfScanner\Test {}.JPEG".format(x))        # print(df_list)        df = pd.DataFrame(df_list, columns=['Mat', 'Batch', 'ERP'])        # print(df)        df.drop_duplicates(inplace=True)        df.dropna(inplace=True, axis=0)        # print(df)        #        # print("\n")        # print(df.iloc[0, 0])        # print("\n")        # print(df.iloc[0, 1])        # print("\n")        # print(df.iloc[0, 2])        final_file_name = df.iloc[0, 0] + "_" + df.iloc[0, 1] + "_" + df.iloc[0, 2] + ".pdf"        # Rename the pdf file        final_name = str(os.path.dirname(doc_name)) + r'/' + final_file_name        print("Final File Name: ", final_name)        print(" /\_/\\")        print(r"( o.o )  File Renamed!")        print(r" > ^ <")        os.rename(doc_name, final_name)    except:        pass    print("Total Time Taken: ", datetime.now() - startTime)# https://towardsdatascience.com/extracting-text-from-scanned-pdf-using-pytesseract-open-cv-cd670ee38052# detect_orientation("str50 806071 sb0004 part 1.pdf")# getFileName('sdfsd.pdf')# https://stackoverflow.com/questions/55119504/is-it-possible-to-check-orientation-of-an-image-before-passing-it-through-pytess# Hide console# https://github.com/pyinstaller/pyinstaller/issues/1647# https://github.com/pyinstaller/pyinstaller/issues/1339